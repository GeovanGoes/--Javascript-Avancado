{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","map","Date","dado","data","quantidade","valor","catch","Error","erro","_obterNegociacoes","url","mensagemErro","resolve","reject","get","objeto","console","error","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoService\r\n{\r\n\r\n    constructor()\r\n    {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoes()\r\n    {\r\n        return Promise.all([this.obterNegociacoesDaSemana(), \r\n                    this.obterNegociacoesDaSemanaAnterior(), \r\n                    this.obterNegociacoesDaSemanaRetrasada()])\r\n                    .then(periodos => \r\n                    {\r\n                        let negociacoes = periodos\r\n                        .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                        .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\r\n                        return negociacoes;\r\n                    }).catch(erro => {throw new Error(erro)});\r\n    }\r\n\r\n    obterNegociacoesDaSemana()\r\n    {\r\n        return this._obterNegociacoes('negociacoes/semana',\"Não foi possível obter as negociações da semana.\");\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada()\r\n    {\r\n        return this._obterNegociacoes('negociacoes/retrasada',\"Não foi possível obter as negociações da semana retrasada.\");\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior()\r\n    {\r\n        return this._obterNegociacoes('negociacoes/anterior',\"Não foi possível obter as negociações da semana anterior.\");\r\n    }\r\n\r\n    _obterNegociacoes(url, mensagemErro)\r\n    {\r\n        return new Promise((resolve, reject) => \r\n        {\r\n            this._http\r\n                .get(url)\r\n                .then(negociacoes => resolve(negociacoes.map((objeto) => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))))\r\n                .catch(erro => {\r\n                    console.error(erro);\r\n                    reject(mensagemErro);\r\n                });     \r\n        });\r\n    }\r\n\r\n    cadastra(negociacao)\r\n    {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociacao adicionada com sucesso.')\r\n            .catch(erro => {throw new Error(erro)})\r\n    }\r\n\r\n    listaTodos()\r\n    {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => \r\n            {\r\n                throw new Error(erro);    \r\n            });\r\n    }\r\n\r\n    apagaTodos()\r\n    {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .catch(erro =>\r\n            {\r\n                throw new Error(erro);\r\n            })\r\n    }\r\n\r\n    importa(listaAtual)\r\n    {\r\n        return this.obterNegociacoes()\r\n        .then(negociacoes => \r\n            negociacoes.filter(negociacao => \r\n                !listaAtual.some(negociacaoExistente => \r\n                    JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))))\r\n        .catch(erro => \r\n        {\r\n            console.error(erro);\r\n            throw new Error(erro)\r\n        });\r\n    }\r\n\r\n}"]}