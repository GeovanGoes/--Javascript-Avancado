{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CACA;AAAA;;AACI,0BAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;;;;oDAED;AACI,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EACnB;AACI,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAC9B;AACIT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aACxB;AACI,oCAAI,CAAChB,UAAL,EACA;AACIA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YACnB;AACI,8CAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACH,qCAHD;AAIH;AACDE,wCAAQL,UAAR;AACH,6BAZD;;AAcAO,wCAAYW,OAAZ,GAAsB,aACtB;AACIC,wCAAQC,KAAR,CAAcP,EAAEC,MAAF,CAASM,KAAvB;AACAd,uCAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,6BAJD;AAKH,yBA5BM,CAAP;AA6BH;;;kDAEoBrB,U,EACrB;AACIH,+BAAOyB,OAAP,CAAe,iBACf;AACI,gCAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACA;AACIzB,2CAAW0B,iBAAX,CAA6BD,KAA7B;AACH;AACDzB,uCAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBAPD;AAQH;;;sDAGD;AACI,4BAAI5B,UAAJ,EACA;AACIC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory\r\n{\r\n    constructor()\r\n    {\r\n        throw new Error(\"Não é possível criar instancias dessa classe.\")\r\n    }\r\n    static getConnection()\r\n    {\r\n        return new Promise((resolve, reject) => \r\n        {\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e =>\r\n            {\r\n                ConnectionFactory._createStores(e.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = e =>\r\n            {\r\n                if (!connection)\r\n                {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function()\r\n                    {\r\n                        throw new Error(\"Você não pode fechar a conexão.\");\r\n                    };\r\n                }\r\n                resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = e =>\r\n            {\r\n                console.error(e.target.error);\r\n                reject(e.target.error.name);\r\n            };\r\n        })\r\n    }\r\n\r\n    static _createStores(connection)\r\n    {\r\n        stores.forEach(store => \r\n        {\r\n            if(connection.objectStoreNames.contains(store))\r\n            {\r\n                connection.deleteObjectStore(store);\r\n            }\r\n            connection.createObjectStore(store, {autoIncrement: true});\r\n        });\r\n    }\r\n\r\n    static closeConnection()\r\n    {\r\n        if (connection)\r\n        {\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}"]}