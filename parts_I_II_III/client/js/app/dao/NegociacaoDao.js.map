{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","Promise","resolve","reject","request","transaction","objectStore","clear","onsuccess","onerror","console","error","e","target","negociacao","add","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EACA;AAAA;;AACI,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;iDAGD;AAAA;;AACI,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EACnB;AACI,gCAAIC,UAAU,MAAKL,WAAL,CACGM,WADH,CACe,CAAC,MAAKL,MAAN,CADf,EAC8B,WAD9B,EAEGM,WAFH,CAEe,MAAKN,MAFpB,EAGGO,KAHH,EAAd;;AAKAH,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,oCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQK,OAAR,GAAkB,aAClB;AACIC,wCAAQC,KAAR,CAAcC,EAAEC,MAAF,CAASF,KAAvB;AACAR,uCAAO,yCAAP;AACH,6BAJD;AAKH,yBAdM,CAAP;AAeH;;;6CAESW,U,EACV;AAAA;;AACI,+BAAO,IAAIb,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EACnB;AACI,gCAAIC,UAAU,OAAKL,WAAL,CACGM,WADH,CACe,CAAC,OAAKL,MAAN,CADf,EAC6B,WAD7B,EAEGM,WAFH,CAEe,OAAKN,MAFpB,EAGGe,GAHH,CAGOD,UAHP,CAAd;;AAKAV,oCAAQI,SAAR,GAAoB,aACpB;AACIN;AACH,6BAHD;;AAKAE,oCAAQK,OAAR,GAAkB,aAClB;AACIC,wCAAQC,KAAR,CAAcC,EAAEC,MAAF,CAASF,KAAvB;AACAR,uCAAO,0CAAP;AACH,6BAJD;AAKH,yBAjBM,CAAP;AAkBH;;;iDAGD;AAAA;;AACI,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EACnB;AACI,gCAAIa,SAAS,OAAKjB,WAAL,CACIM,WADJ,CACgB,CAAC,OAAKL,MAAN,CADhB,EAC+B,WAD/B,EAEIM,WAFJ,CAEgB,OAAKN,MAFrB,EAGIiB,UAHJ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOR,SAAP,GAAmB,aACnB;AACI,oCAAIW,QAAQP,EAAEC,MAAF,CAASO,MAArB;;AAEA,oCAAID,KAAJ,EACA;AACI,wCAAIE,OAAOF,MAAMG,KAAjB;AACAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;AACAP,0CAAMQ,QAAN;AACH,iCALD,MAOA;AACIzB,4CAAQgB,WAAR;AACH;AACJ,6BAdD;;AAgBAF,mCAAOP,OAAP,GAAiB,aACjB;AACIC,wCAAQC,KAAR,CAAcC,EAAEC,MAAF,CAASF,KAAvB;AACAR,uCAAO,yCAAP;AACH,6BAJD;AAKH,yBA9BM,CAAP;AA+BH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoDao\r\n{\r\n    constructor(connection)\r\n    {\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    apagaTodos()\r\n    {\r\n        return new Promise((resolve, reject) => \r\n        {\r\n            let request = this._connection\r\n                            .transaction([this._store], 'readwrite')\r\n                            .objectStore(this._store)\r\n                            .clear();\r\n\r\n            request.onsuccess = e => resolve(\"Negociações removidas com sucesso.\");\r\n\r\n            request.onerror = e => \r\n            {\r\n                console.error(e.target.error);\r\n                reject(\"Não foi possível remover as negociações\");\r\n            };\r\n        })\r\n    }\r\n\r\n    adiciona (negociacao)\r\n    {\r\n        return new Promise((resolve, reject) =>\r\n        {\r\n            let request = this._connection\r\n                            .transaction([this._store],'readwrite')\r\n                            .objectStore(this._store)\r\n                            .add(negociacao);\r\n\r\n            request.onsuccess = e => \r\n            {\r\n                resolve()\r\n            };\r\n\r\n            request.onerror = e => \r\n            {\r\n                console.error(e.target.error);\r\n                reject(\"Não foi possível adicionar a negociação.\");\r\n            };\r\n        })\r\n    }\r\n\r\n    listaTodos()\r\n    {\r\n        return new Promise((resolve, reject) => \r\n        {\r\n            let cursor = this._connection\r\n                            .transaction([this._store], 'readwrite')\r\n                            .objectStore(this._store)\r\n                            .openCursor();\r\n\r\n            let negociacoes = [];\r\n            \r\n            cursor.onsuccess = e => \r\n            {\r\n                let atual = e.target.result;\r\n\r\n                if (atual)\r\n                {\r\n                    let dado = atual.value;\r\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n                    atual.continue();\r\n                }\r\n                else\r\n                {\r\n                    resolve(negociacoes);\r\n                }\r\n            };\r\n\r\n            cursor.onerror = e => \r\n            {\r\n                console.error(e.target.error);\r\n                reject(\"Não foi possível listar as negociações.\");\r\n            };\r\n        })\r\n    }\r\n}"]}